// Java soln : https://leetcode.com/problems/count-number-of-nice-subarrays/
//C++ soln : https://www.youtube.com/watch?v=E80cxppKL9Y
//Question: https://leetcode.com/problems/count-number-of-nice-subarrays/description/
//TC:O(n)  SC:O(n)

//C++ code:

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {

        unordered_map<int,int> mp;
        int oddCount = 0;
        int count = 0;

        for(int i = 0;i<nums.size();i++)
        {
            oddCount+=nums[i]%2;
            if(oddCount == k)
            count++;
            /*
              for i/p: nums = [1,1,2,1,1], k = 3
              The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
              So to get other required subarray with same odd numbers count this logic 
              is used. From index 0 to index 4 there are 4 odd nums and if we exclude 
              index 0 , so remaining subarray will also have 3 odd numbers resulting 
              in 2 sub arrays having 3 odd numbers. So below logic handles that
             */
            if(mp.find(oddCount - k)!=mp.end())
            count+= mp[oddCount - k];

            if(mp.find(oddCount)!=mp.end())
              mp[oddCount]++;
              else
              mp[oddCount]= 1;
        }
        return count;
    }
};
